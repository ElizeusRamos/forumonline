/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.30).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package br.com.pegasus.forum.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-01-11T20:19:06.528594300-03:00[America/Sao_Paulo]")
@Validated
public interface UserApi {

    @Operation(summary = "Alteração de email de usuários por ID.", description = "Altera email de usuário.", tags={ "Usuario" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "sucesso alteracao") })
    @RequestMapping(value = "/user/alterar-email/{id}",
        method = RequestMethod.PUT)
    ResponseEntity<Void> alterarEmailUsuario(@Parameter(in = ParameterIn.PATH, description = "ID usuário", required=true, schema=@Schema()) @PathVariable("id") Long id, @Parameter(in = ParameterIn.QUERY, description = "Novo Email" ,schema=@Schema()) @Valid @RequestParam(value = "emailNovo", required = false) String emailNovo);


    @Operation(summary = "Alteração de formação acadêmica de usuários por ID.", description = "Altera formação acadêmica de usuário.", tags={ "Usuario" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "sucesso alteracao") })
    @RequestMapping(value = "/user/alterar-formacao/{id}",
        method = RequestMethod.PUT)
    ResponseEntity<Void> alterarFormacaoUsuario(@Parameter(in = ParameterIn.PATH, description = "ID usuário", required=true, schema=@Schema()) @PathVariable("id") Long id, @Parameter(in = ParameterIn.QUERY, description = "Nova Formação Acadêmica" ,schema=@Schema()) @Valid @RequestParam(value = "formacaoNova", required = false) String formacaoNova);


    @Operation(summary = "Alteração de nome de usuários por ID.", description = "Altera nome de usuário.", tags={ "Usuario" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "sucesso alteracao") })
    @RequestMapping(value = "/user/alterar-nome/{id}",
        method = RequestMethod.PUT)
    ResponseEntity<Void> alterarNomeUsuario(@Parameter(in = ParameterIn.PATH, description = "ID usuário", required=true, schema=@Schema()) @PathVariable("id") Long id, @Parameter(in = ParameterIn.QUERY, description = "Novo Nome" ,schema=@Schema()) @Valid @RequestParam(value = "nomeNovo", required = false) String nomeNovo);


    @Operation(summary = "Alteração de profissão de usuários por ID.", description = "Altera profissão de usuário.", tags={ "Usuario" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "sucesso alteracao") })
    @RequestMapping(value = "/user/alterar-profissao/{id}",
        method = RequestMethod.PUT)
    ResponseEntity<Void> alterarProfissaoUsuario(@Parameter(in = ParameterIn.PATH, description = "ID usuário", required=true, schema=@Schema()) @PathVariable("id") Long id, @Parameter(in = ParameterIn.QUERY, description = "Nova Profissao" ,schema=@Schema()) @Valid @RequestParam(value = "profissaoNova", required = false) String profissaoNova);


    @Operation(summary = "Alteração de senha de usuários por ID.", description = "Altera senha de usuário.", tags={ "Usuario" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "sucesso alteracao") })
    @RequestMapping(value = "/user/alterar-senha/{id}",
        method = RequestMethod.PUT)
    ResponseEntity<Void> alterarSenhaUsuario(@Parameter(in = ParameterIn.PATH, description = "ID usuário", required=true, schema=@Schema()) @PathVariable("id") Long id, @Parameter(in = ParameterIn.QUERY, description = "Atual Senha" ,schema=@Schema()) @Valid @RequestParam(value = "senhaAtual", required = false) String senhaAtual, @Parameter(in = ParameterIn.QUERY, description = "Nova Senha" ,schema=@Schema()) @Valid @RequestParam(value = "senhaNova", required = false) String senhaNova);

}

